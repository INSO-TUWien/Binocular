ARG NODE_VERSION
ARG BUILDPLATFORM=${BUILDPLATFORM:-amd64}
FROM --platform=${BUILDPLATFORM} node:${NODE_VERSION}-alpine3.18 AS install

# NPM ci first, as to NOT invalidate previous steps except for when package.json changes
WORKDIR /app/binocular

RUN --mount=type=bind,src=./docker/frontend-mem-nag.sh,target=/frontend-mem-nag.sh \
  /frontend-mem-nag.sh

#RUN --mount=type=bind,src=./package-lock.json,target=./package-lock.json,readonly \
#    --mount=type=bind,src=./package.json,target=./package.json,readonly \
RUN --mount=type=bind,src=./package.json,target=./package.json,readonly \
    --mount=type=bind,src=./binocular-backend/package.json,target=./binocular-backend/package.json,readonly \
    --mount=type=bind,src=./binocular-frontend/package.json,target=./binocular-frontend/package.json,readonly \
#    npm ci --omit=optional --ignore-scripts && \
# Error: Cannot find module @rollup/rollup-linux-x64-musl.
    # npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828).
    # Please try `npm i` again after removing both package-lock.json and node_modules directory.
#    npm ci --ignore-scripts && \
    npm i && \
#    npm run install:backend && \
#    npm run install:frontend && \
    npm cache clean --force
# RUN wget https://gobinaries.com/tj/node-prune --output-document - | /bin/sh && node-prune

###
FROM --platform=${BUILDPLATFORM} node:${NODE_VERSION}-alpine3.18 AS builder
ENV NODE_ENV=production
ENV NODE_OPTIONS=--max_old_space_size=4096
ENV GENERATE_SOURCEMAP=false

RUN apk add git

WORKDIR /app/binocular
RUN chown node:node -R /app/binocular

COPY --from=install --chown=node:node /app/binocular/node_modules ./node_modules
COPY --from=install --chown=node:node /app/binocular/binocular-backend/node_modules ./binocular-backend/node_modules
COPY --from=install --chown=node:node /app/binocular/binocular-frontend/node_modules ./binocular-frontend/node_modules

# folders
COPY --chown=node:node ./foxx ./foxx
COPY --chown=node:node ./binocular-backend ./binocular-backend
COPY --chown=node:node ./services ./services
COPY --chown=node:node ./binocular-frontend ./binocular-frontend

# files
COPY --chown=node:node ./package.json ./package.json
COPY --chown=node:node ./package-lock.json ./package-lock.json
COPY --chown=node:node ./LICENSE ./LICENSE

# RUN npm install -g .
RUN npm install -g tsx

RUN mkdir -p /app/binocular/binocular-frontend/db_export
RUN mkdir -p /app/binocular/binocular-frontend/config

RUN chown node:node -R /app/binocular/binocular-frontend

RUN mkdir -p /app/binocular/repo
RUN chown node:node /app/binocular/repo

RUN git config --global --add safe.directory /app/binocular/repo/*

USER node 

# ENTRYPOINT ["/usr/bin/dumb-init", "--", "/entrypoint"]
# CMD []
